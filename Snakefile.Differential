# setting this up to work for mouse and human, needs to be adapted for Rhesus macaque

import os,re
from os import listdir
from os.path import join
import glob
import json

import program
import reference

wdir = os.getcwd()
sourcedir = wdir + "/fastq/"

with open(wdir + '/cluster.json') as file:
    clusterConfig = json.load(file)

with open(wdir+ '/config.json') as file:
    config = json.load(file)

# this script currently assumes that naming is _R1.fastq.gz
sample = [os.path.basename(file).split('.')[0] for file in glob.glob(sourcedir+'/*')]

samps = []
for item in sample:
        newvar = item.split("_R1")
        othervar = item.split("_R2")
        samps.append(newvar[0])
new = []
for item in samps:
        if '_R2' not in item:
                new.append(item)
samples = new

#### if there are no fastq files:
if len(samples) == 0:
   samples = [os.path.basename(file).split('.')[0] for file in glob.glob(wdir + "/bam"+'/*')]

PeakTools = ['Diffbind_EdgeR','Diffbind_Deseq2']
UropaCats = ["genes","prot","protSEC","protTSS","geneTSS"]
Directions =["_pos","_neg",""]

DiffBind_Dir = "DiffBind"
Uropa_Dir = "Uropa"
Homer_Dir = "Homer_motifs"
Homer_Dir2 = "Homer_annotations"

def zip_contrasts(contrast):
    """making output file names for differential binding analyses"""
    zipGroup1, zipGroup2, contrasts = [], [], []
    for g1, g2 in contrast:
        zipGroup1.append(g1)
        zipGroup2.append(g2)
        contrasts.append( g1 + "_vs_" + g2)
    return( zipGroup1, zipGroup2, contrasts )

contrast = list(config["contrasts"].values())
groupdata = config["groups"]
zipGroup1, zipGroup2, contrasts = zip_contrasts(contrast)

# because I am grabbing code from a previous location sometimes group1 and group2 are written separately and sometimes that are combined as a single contrast
# "sample" always is individual sample identifier while "name" may refer to a contrast
if config["ref"] == "rheMac10":
    rule all:
        input:
            expand(join(wdir,DiffBind_Dir,"{group1}_vs_{group2}","{group1}_vs_{group2}_Diffbind.html"),zip,group1=zipGroup1,group2=zipGroup2),
            expand(join(wdir,Homer_Dir,"{name}","{name}-{PeakTool}","knownResults.txt"),PeakTool=PeakTools,name=contrasts),
            expand(join(wdir,Uropa_Dir,"{name}","{name}-{PeakTool}_uropa_{type}_finalhits.txt"),name=contrasts,PeakTool=PeakTools,type=UropaCatslist( UropaCats[i] for i in [0,4] )),
else:
    rule all:
        input:
            expand(join(wdir,DiffBind_Dir,"{group1}_vs_{group2}","{group1}_vs_{group2}_Diffbind.html"),zip,group1=zipGroup1,group2=zipGroup2),
            expand(join(wdir,Uropa_Dir,"{name}","{name}-{PeakTool}_uropa_{type}_finalhits.txt"),name=contrasts,PeakTool=PeakTools,type=UropaCats[0:4]),
            expand(join(wdir,Homer_Dir,"{name}","{name}-{PeakTool}","knownResults.txt"),PeakTool=PeakTools,name=contrasts),

rule markdup:
    input: wdir + "/bam/{sample}.sorted.bam"
    output: 
        out = wdir +"/bam/{sample}.sorted.markdup.bam",
        out1= wdir +"/bam/{sample}.duplic",
    shell: """
module load {program.markedup}
if [ ! -e /lscratch/$SLURM_JOBID ]; then mkdir /lscratch/$SLURM_JOBID ;fi
java -Xmx{clusterConfig[markdup][mem]} -jar $PICARDJARPATH/picard.jar MarkDuplicates INPUT={input} OUTPUT={output.out} ASSUME_SORTED=true CREATE_INDEX=true MAX_FILE_HANDLES_FOR_READ_ENDS_MAP=1000 VALIDATION_STRINGENCY=LENIENT TMP_DIR=/lscratch/$SLURM_JOBID METRICS_FILE={output.out1}
"""

rule markdupIndex:
    input: wdir +"/bam/{sample}.sorted.markdup.bam"
    output: bai = wdir+ "/bam/{sample}.sorted.markdup.bam.bai",
            idx = wdir+ "/bam/{sample}.sorted.markdup.bam.idxstat"
    shell: """
module load {program.samtools}; samtools index {input}
samtools idxstats {input} > {output.idx}
"""

rule diffbind:
    input:
        expand(wdir +"/bam/{sample}.sorted.markdup.bam.bai",sample=samples),
        expand(wdir+"/Genrich/{sample}.narrowPeak",sample=samples)
    output:
        outtxt0=join(wdir,DiffBind_Dir,"{group1}_vs_{group2}","{group1}_vs_{group2}-" + PeakTools[0] + ".txt"),
        outtxt1=join(wdir,DiffBind_Dir,"{group1}_vs_{group2}","{group1}_vs_{group2}-" + PeakTools[1] + ".txt"),
        outbed0=join(wdir,DiffBind_Dir,"{group1}_vs_{group2}","{group1}_vs_{group2}-" + PeakTools[0] + ".bed"),
        outbed1=join(wdir,DiffBind_Dir,"{group1}_vs_{group2}","{group1}_vs_{group2}-" + PeakTools[1] + ".bed"),
       	outbedpos0=join(wdir,DiffBind_Dir,"{group1}_vs_{group2}","{group1}_vs_{group2}-" + PeakTools[0] + Directions[0] + ".bed"),
	outbedneg0=join(wdir,DiffBind_Dir,"{group1}_vs_{group2}","{group1}_vs_{group2}-" + PeakTools[0] + Directions[1] + ".bed"),
        outbedpos1=join(wdir,DiffBind_Dir,"{group1}_vs_{group2}","{group1}_vs_{group2}-" + PeakTools[1] + Directions[0] + ".bed"),
        outbedneg1=join(wdir,DiffBind_Dir,"{group1}_vs_{group2}","{group1}_vs_{group2}-" + PeakTools[1] + Directions[1] + ".bed"),
        html=join(wdir,DiffBind_Dir,"{group1}_vs_{group2}","{group1}_vs_{group2}_Diffbind.html")
    params:
        rname="pl:diffbind",
        projectID = config["projectID"],
        outdir = join(wdir,DiffBind_Dir,"{group1}_vs_{group2}"),
        contrast = "{group1}_vs_{group2}",
        csvfile = join(wdir,DiffBind_Dir,"{group1}_vs_{group2}","{group1}_vs_{group2}_Diffbind_prep.csv"),
    run:
        samplesheet = [",".join(["SampleID","Condition", "Replicate", "bamReads", 
                      "Peaks", "PeakCaller"])]
        for condition in wildcards.group1,wildcards.group2:
            for samplename in groupdata[condition]:
                replicate = str([ i + 1 for i in range(len(groupdata[condition])) if groupdata[condition][i] == samplename][0])
                bamReads = join(wdir, "bam", samplename + ".sorted.markdup.bam")
                peaks = join(wdir, "Genrich", samplename + ".narrowPeak")
                samplesheet.append(",".join([samplename, condition, replicate, bamReads, peaks, "narrowPeak"]))
        f = open(params.csvfile, 'w')
        f.write ("\n".join(samplesheet))
        f.close()
        cmd1 = "module load {program.RverDB}; cp Scripts/{program.DBrscript1} {params.outdir}; cp Scripts/{program.DBrscript2} {params.outdir}; cd {params.outdir}; "
        cmd2 = "Rscript {program.DBrscript1} '.' {output.html} {params.csvfile} '{params.contrast}' 'Genrich' '{params.projectID}';"
	cmd3 = "awk -v OFS='\\t' '{{ if (NR>1) print $1,$2,$3,\"Peak_\"(NR-1)}}' {output.outtxt0} > {output.outbed0};"
	cmd4 = "awk -v OFS='\\t' '{{ if (NR>1) print $1,$2,$3,\"Peak_\"(NR-1)}}' {output.outtxt1} > {output.outbed1};"
	cmd5 = "awk -v OFS='\\t' '{{ if ((NR>1) && ($9 >= 0)) print $1,$2,$3,\"Peak_\"(NR-1)}}' {output.outtxt0} > {output.outbedpos0};"
	cmd6 = "awk -v OFS='\\t' '{{ if ((NR>1) && ($9 < 0)) print $1,$2,$3,\"Peak_\"(NR-1)}}' {output.outtxt0} > {output.outbedneg0};"
	cmd7 = "awk -v OFS='\\t' '{{ if ((NR>1) && ($9 >= 0)) print $1,$2,$3,\"Peak_\"(NR-1)}}' {output.outtxt1} > {output.outbedpos1};"
	cmd8 = "awk -v OFS='\\t' '{{ if ((NR>1) && ($9 < 0)) print $1,$2,$3,\"Peak_\"(NR-1)}}' {output.outtxt1} > {output.outbedneg1};"
	shell( cmd1 + cmd2 + cmd3 + cmd4 + cmd5 + cmd6 + cmd7 + cmd8 )

rule HOMER_motif:
    input:
        inbase=join(wdir,DiffBind_Dir,"{name}","{name}-{PeakTool}.bed"),
        inpos=join(wdir,DiffBind_Dir,"{name}","{name}-{PeakTool}" + Directions[0] + ".bed"),
        inneg=join(wdir,DiffBind_Dir,"{name}","{name}-{PeakTool}" + Directions[1] + ".bed")
    output:
        outbase=join(wdir,Homer_Dir,"{name}","{name}-{PeakTool}","knownResults.txt"),
        outpos=join(wdir,Homer_Dir,"{name}","{name}-{PeakTool}" + Directions[0],"knownResults.txt"),
        outneg=join(wdir,Homer_Dir,"{name}","{name}-{PeakTool}" + Directions[1],"knownResults.txt")
    params:
        parbase=join(wdir,Homer_Dir,"{name}","{name}-{PeakTool}"),
        parpos=join(wdir,Homer_Dir,"{name}","{name}-{PeakTool}" + Directions[0]),
        parneg=join(wdir,Homer_Dir,"{name}","{name}-{PeakTool}" + Directions[1]),
        rname="pl:HOMER_motif"
    shell: """
module load {program.homerver} 
findMotifsGenome.pl {input.inbase} {config[ref]} {params.parbase} -size given -p {clusterConfig[HOMER_motif][threads]} -len 8,10 -preparsedDir /lscratch/$SLURM_JOBID
findMotifsGenome.pl {input.inpos} {config[ref]} {params.parpos} -size given -p {clusterConfig[HOMER_motif][threads]} -len 8,10 -preparsedDir /lscratch/$SLURM_JOBID
findMotifsGenome.pl {input.inneg} {config[ref]} {params.parneg} -size given -p {clusterConfig[HOMER_motif][threads]} -len 8,10 -preparsedDir /lscratch/$SLURM_JOBID
"""

rule HOMER_annot:
    input:
        bed=join(wdir,DiffBind_Dir,"{name}","{name}-{PeakTool}.bed"),
        txt=join(wdir,DiffBind_Dir,"{name}","{name}-{PeakTool}.txt")
    output:
        outbase=join(wdir,Homer_Dir2,"{name}","{name}-{PeakTool}.annotations.txt"),
        outmergebase=join(wdir, Homer_Dir2,"{name}","{name}-{PeakTool}.annotations.merged.txt"),
        outmergepos=join(wdir, Homer_Dir2,"{name}","{name}-{PeakTool}.annotations." + Directions[0] + ".txt"),
        outmergeneg=join(wdir, Homer_Dir2,"{name}","{name}-{PeakTool}.annotations." + Directions[1] + ".txt")
    params:
        rname="pl:HOMER_annot",
        fldr = join(wdir, Homer_Dir2,"{name}"),
    shell: """
module load {program.homerver}
annotatePeaks.pl {input.bed} {config[ref]} > {output.outbase}

module load {program.RverDB}
cp Scripts/{program.Merge2rscript} {params.fldr}
cd {params.fldr}
Rscript {program.Merge2rscript} {input.txt} {output.outbase}
awk -F'\\t' '{{if (NR==1) print $0; else if ((NR>1) && ($7>=0)) print $0}}' {output.outmergebase} > {output.outmergepos}
awk -F'\\t' '{{if (NR==1) print $0; else if ((NR>1) && ($7<0)) print $0}}' {output.outmergebase} > {output.outmergeneg}
"""

if config["ref"] == "rheMac10":
    rule UROPA:
        input:
            bed=join(wdir,DiffBind_Dir,"{name}","{name}-{PeakTool}.bed"),
            txt=join(wdir,DiffBind_Dir,"{name}","{name}-{PeakTool}.txt")
        output:
            outbase=join(wdir, Uropa_Dir,"{name}","{name}-{PeakTool}_uropa_{type}_finalhits.txt"),
            outmergebase=join(wdir, Uropa_Dir,"{name}","{name}-{PeakTool}_uropa_{type}_finalhits.merged.txt"),
            outmergepos=join(wdir, Uropa_Dir,"{name}","{name}-{PeakTool}_uropa_{type}_finalhits" + Directions[0] + ".txt"),
            outmergeneg=join(wdir, Uropa_Dir,"{name}","{name}-{PeakTool}_uropa_{type}_finalhits" + Directions[1] + ".txt")
        params:
            rname="pl:uropa",
            fldr = join(wdir, Uropa_Dir,"{name}"),
            json = join(wdir, Uropa_Dir,"{name}","{name}.{PeakTool}.{type}.json"),
            outroot = join(wdir, Uropa_Dir,"{name}","{name}-{PeakTool}_uropa_{type}")
        shell: """
module load {program.uropaverRh};
if [ ! -e {params.fldr} ]; then mkdir {params.fldr}; fi
echo '{{"queries":[ ' > {params.json}
if [ '{wildcards.type}' == 'genes' ]; then
     echo '      {{ "feature":"gene","distance":5000,"show.attributes":"gene_id"}},' >> {params.json}
     echo '      {{ "feature":"gene","distance":100000,"show.attributes":"gene_id" }}],' >> {params.json}
else
     echo '      {{ "feature":"gene","distance":[3000,1000],"feature.anchor":"start" }},' >> {params.json}
     echo '      {{ "feature":"gene","distance":3000,"feature.anchor":"end" }},' >> {params.json}
     echo '      {{ "feature":"gene","distance":100000,"feature.anchor":"center" }},' >> {params.json}
     echo '      {{ "feature":"gene","distance":100000 }}],' >> {params.json}
fi
echo '"show_attributes":["gene_id"],' >> {params.json}
echo '"priority":"Yes",' >> {params.json}
echo '"gtf":"{reference.gtf}",' >> {params.json}
echo '"bed": "{input.bed}" }}' >> {params.json}
uropa -i {params.json} -p {params.outroot} -t {clusterConfig[UROPA][threads]} -s
module load {program.RverDB}
cp Scripts/{program.Mergerscript} {params.fldr}
cd {params.fldr}
Rscript {program.Mergerscript} {input.txt} {output.outbase}
awk -F'\\t' '{{if (NR==1) print $0; else if ((NR>1) && ($8>=0)) print $0}}' {output.outmergebase} > {output.outmergepos}
awk -F'\\t' '{{if (NR==1) print $0; else if ((NR>1) && ($8<0)) print $0}}' {output.outmergebase} > {output.outmergeneg}
"""
else:
    rule UROPA:
        input:
            bed=join(wdir,DiffBind_Dir,"{name}","{name}-{PeakTool}.bed"),
            txt=join(wdir,DiffBind_Dir,"{name}","{name}-{PeakTool}.txt")
        output:
            outbase=join(wdir, Uropa_Dir,"{name}","{name}-{PeakTool}_uropa_{type}_finalhits.txt"),
	    outmergebase=join(wdir, Uropa_Dir,"{name}","{name}-{PeakTool}_uropa_{type}_finalhits.merged.txt"),
	    outmergepos=join(wdir, Uropa_Dir,"{name}","{name}-{PeakTool}_uropa_{type}_finalhits" + Directions[0] + ".txt"),
	    outmergeneg=join(wdir, Uropa_Dir,"{name}","{name}-{PeakTool}_uropa_{type}_finalhits" + Directions[1] + ".txt")
        params:
            rname="pl:uropa",
            fldr = join(wdir, Uropa_Dir,"{name}"),
            json = join(wdir, Uropa_Dir,"{name}","{name}.{PeakTool}.{type}.json"),
            outroot = join(wdir, Uropa_Dir,"{name}","{name}-{PeakTool}_uropa_{type}")
        shell: """
module load {program.uropaver};
if [ ! -e {params.fldr} ]; then mkdir {params.fldr}; fi
echo '{{"queries":[ ' > {params.json}
if [ '{wildcards.type}' == 'prot' ]; then
     echo '      {{ "feature":"gene","distance":5000,"filter.attribute":"gene_type","attribute.value":"protein_coding" }},' >> {params.json}
     echo '      {{ "feature":"gene","distance":100000,"filter.attribute":"gene_type","attribute.value":"protein_coding" }}],' >> {params.json}
elif [ '{wildcards.type}' == 'genes' ]; then
     echo '      {{ "feature":"gene","distance":5000 }},' >> {params.json}
     echo '      {{ "feature":"gene","distance":100000 }}],' >> {params.json}
elif [ '{wildcards.type}' == 'protSEC' ]; then
     echo '      {{ "feature":"gene","distance":[3000,1000],"filter.attribute":"gene_type","attribute.value":"protein_coding","feature.anchor":"start" }},' >> {params.json}
     echo '      {{ "feature":"gene","distance":3000,"filter.attribute":"gene_type","attribute.value":"protein_coding","feature.anchor":"end" }},' >> {params.json}
     echo '      {{ "feature":"gene","distance":100000,"filter.attribute":"gene_type","attribute.value":"protein_coding","feature.anchor":"center" }},' >> {params.json}
     echo '      {{ "feature":"gene","distance":100000,"filter.attribute":"gene_type","attribute.value":"protein_coding" }}],' >> {params.json}
elif [ '{wildcards.type}' == 'protTSS' ]; then
     echo '      {{ "feature":"gene","distance":[3000,1000],"filter.attribute":"gene_type","attribute.value":"protein_coding","feature.anchor":"start" }},' >> {params.json}
     echo '      {{ "feature":"gene","distance":10000,"filter.attribute":"gene_type","attribute.value":"protein_coding","feature.anchor":"start" }},' >> {params.json}
     echo '      {{ "feature":"gene","distance":100000,"filter.attribute":"gene_type","attribute.value":"protein_coding","feature.anchor":"start" }}],' >> {params.json}

fi
echo '"show_attributes":["gene_id", "gene_name","gene_type"],' >> {params.json}
echo '"priority":"Yes",' >> {params.json}
echo '"gtf":"{reference.gtf}",' >> {params.json}
echo '"bed": "{input.bed}" }}' >> {params.json}
uropa -i {params.json} -p {params.outroot} -t {clusterConfig[UROPA][threads]} -s
module load {program.RverDB}
cp Scripts/{program.Mergerscript} {params.fldr}
cd {params.fldr}
Rscript {program.Mergerscript} {input.txt} {output.outbase}
awk -F'\\t' '{{if (NR==1) print $0; else if ((NR>1) && ($8>=0)) print $0}}' {output.outmergebase} > {output.outmergepos}
awk -F'\\t' '{{if (NR==1) print $0; else if ((NR>1) && ($8<0)) print $0}}' {output.outmergebase} > {output.outmergeneg}
"""
